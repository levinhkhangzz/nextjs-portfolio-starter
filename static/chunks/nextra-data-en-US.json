{"/":{"title":"Le Vinh Khang","data":{"":"He’s a student from Vietnam, living in Ho Chi Minh City. the blog for documentation about his programming 🎒 journey, running on Amazon Hosting, he also loves to learning web technology; but he often forgot, that a reason why him doing the writing.\nTwitter @aedotris\nGitHub @levinhkhangzz\nInstagram @williamcachamwri\nEmail levinhkhang631@gmail.com"}},"/photos":{"title":"Photos","data":{"":"Here's some of my photography.\nUnsplash ↗ \nUnsplash ↗"}},"/posts":{"title":"Posts","data":{}},"/tags/[tag]":{"title":"Tagged Posts","data":{}},"/posts/journey-of-creating-my-website":{"title":"Journey of Creating My Website 🚀","data":{"beginnings-#Beginnings 🌱":"The idea for this website sprouted from a desire to share knowledge and experiences in the field of web development. Drawing inspiration from the need for a platform that empowers both beginners and experienced developers alike, we envisioned a space where collaboration, learning, and innovation thrive.","technology-stack-️#Technology Stack 🛠️":"The website is built using Next.js, a React framework that allows for easy creation of pages and dynamic routes. This choice was made for its simplicity, scalability, and efficient handling of both static and dynamic content.","pre-rendering-strategies-️#Pre-rendering Strategies 🖌️":"The site leverages Next.js's pre-rendering capabilities for optimal performance and SEO. The two forms of pre-rendering employed are:","static-generation-#Static Generation 🏭":"Static Generation was utilized for most pages, such as the landing page, about page, and contact page. This approach ensures that these pages are pre-rendered at build time, resulting in faster loading speeds and improved SEO.","server-side-rendering-#Server-side Rendering 🌐":"In cases where dynamic data is essential, such as real-time updates or user-specific content, Server-side Rendering was the preferred choice. This is particularly evident in sections like the user dashboard, where content is tailored to each user.","data-fetching-#Data Fetching 🔄":"The site fetches data from various sources to provide dynamic and up-to-date content. Data fetching strategies include:","static-generation-with-data-#Static Generation with Data 📊":"For pages where content depends on external data, such as blog posts, the getStaticProps function is utilized to fetch and pre-render the necessary data during build time.\n// Example MDX Blog Post Component\nimport React from 'react';\nfunction BlogPost({ title, content }) {\n  return (\n    <article>\n      <h1>{title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: content }} />\n    </article>\n  );\n}\nexport default BlogPost;","dynamic-routes-️#Dynamic Routes 🛤️":"Dynamic routes, enabled by Next.js, are employed for sections like the blog post details page (posts/[id].js). The getStaticPaths and getStaticProps functions work together to fetch data and pre-render pages based on dynamic paths.","challenges-and-learnings-#Challenges and Learnings 🤔":"Throughout the development process, several challenges were encountered and valuable lessons were learned. Some of the noteworthy experiences include optimizing data fetching for large datasets, implementing responsive design for a seamless user experience, and fine-tuning SEO strategies for better discoverability.","conclusion-#Conclusion 🎉":"In conclusion, the journey of creating this website involved careful planning, technology decisions, and overcoming challenges. The end result is a platform that aims to provide valuable content to the web development community. As we continue to grow, user feedback and technological advancements will guide our ongoing efforts to enhance and expand the features of this site.Thank you for joining us on this exploration of how this site came to life. We look forward to the continued evolution of this platform and the exciting developments that lie ahead."}}}